package main

import "github.com/juntaki/jnigo"

var jvm *jnigo.JVM

func init() {
	jvm = jnigo.CreateJVM()
}

type {{.Name}} struct{
	jclass *jnigo.JClass
}

func New{{.Name}}(args ...interface{}) (*{{.Name}}, error) {
	convertedArgs, err := jvm.ConvertAll(args)
	if err != nil{
		return nil, err
	}
	jclass, err := jvm.NewJClass("{{.FQCN}}", convertedArgs)
	if err != nil{
		return nil, err
	}
	return &{{.Name}}{
		jclass: jclass,
	}, nil
}
{{range .Variable}}
func (c *{{$.Name}}) Get{{.Symbol}}() (jnigo.JObject, error) {
	return c.jclass.GetField("{{.Symbol}}", "{{.Signature}}")
}
{{end}}

{{range .Variable}}
func (c *{{$.Name}}) Set{{.Symbol}}(arg interface{}) (error) {
	convertedArg = jvm.Convert(arg)
	return c.jclass.SetField("{{.Symbol}}", convertedArg)
}
{{end}}

{{range .Function}}
func (c *{{$.Name}}) {{.Symbol}}(args ...interface{}) (jnigo.JObject, error) {
	convertedArgs, err := jvm.ConvertAll(args)
	if err != nil {
		return nil, err
	}
	sigArgs := ""
	for _, arg := range convertedArgs {
		sigArgs += arg.Signature()
	}
	sigMap := {{.SignatureMap}}
	return c.jclass.CallFunction("{{.Symbol}}", sigMap[sigArgs], convertedArgs)
}
{{end}}
{{range .StaticFunction}}
func {{$.Name}}{{.Symbol}}(args ...interface{}) (jnigo.JObject, error) {
	convertedArgs, err := jvm.ConvertAll(args)
	if err != nil {
		return nil, err
	}
	sigArgs := ""
	for _, arg := range convertedArgs {
		sigArgs += arg.Signature()
	}
	sigMap := {{.SignatureMap}}
	return jvm.CallStaticFunction("{{$.FQCN}}", "{{.Symbol}}", sigMap[sigArgs], convertedArgs)
}
{{end}}
